<?php

	class Token {
		
		/**
		 * Link to Database module.
		 * @var Database
		 */
		private $database = null;
		
		/**
		 * Instantiate Class.
		 */
		public function __construct(&$database) {
			
			$this->database =& $database;
		
		}
		
		/**
		 * Removes a registration token by either token name or token id.
		 * @param string|integer $token Token string or ID.
		 * @return boolean TRUE on success, FALSE otherwise.
		 */
		public function remove($token) {
			
			return (boolean) $this->database->query(array(
				'name' => 'removeToken',
				'type' => 'mysql',
				'table' => 'user.registration.tokens',
				'operation' => 'delete',
				'where' => array(
					(is_string($token)?'token':'id') => $token
				)
			))->fetch()['removeToken'];

		}
		
		/**
		 * Removes a registration token assigned to a user email.
		 * @param string|integer $userEmail User email for token.
		 * @return boolean TRUE on success, FALSE otherwise.
		 */
		public function removeForUser($userEmail) {
			
			return (boolean) $this->database->query(array(
				'name' => 'removeToken',
				'type' => 'mysql',
				'table' => 'user.registration.tokens',
				'operation' => 'delete',
				'where' => array(
					'email' => $userEmail
				)
			))->fetch()['removeToken'];

		}
		
		/**
		 * Purges ALL tokens from database older than $days days.
		 * @param integer $days Purge time threshold.
		 * @return boolean TRUE if successful, FALSE otherwise.
		 */
		public function purgeOld($days) {
		
			return (boolean) $this->database->query(array(
				'name' => 'purgeTokens',
				'type' => 'mysql',
				'table' => 'user.registration.tokens',
				'operation' => 'delete',
				'where' => array(
					'added' => array(
						'operator' => '<',
						'data' => 'DATE_ADD(NOW(), INTERVAL -' . $days . ' DAY)'
					)
				)
			))->fetch()['purgeTokens'];

		}
		
		/**
		 * Creates a registration token for $email.
		 * @param string $email User email to create token for.
		 * @param integer $companyId User database id.
		 * @return mixed Token string if successful, or:<br>
		 * 1 - Please provide a valid email.
		 */
		public function create($email, $companyId) {
			
			if(filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
				$return = 1;
			} else {
				$token = uniqid('', true);
				$return = (boolean) $this->database->query(array(
					'name' => 'createToken',
					'type' => 'mysql',
					'operation' => 'insert',
					'table' => 'user.registration.tokens',
					'columns' => array(
						'token' => $token,
						'email' => $email,
						'company_id' => $companyId
					)
				))->fetch()['createToken'];
				
				if ($return === true) {
					$return = $token;
				}
				
			}
			
			return $return;

		}
		
		/**
		 * Check if $token exists and is valid for $email.
		 * @param string $token Token to check.
		 * @param string $email Email $token is bound to.
		 * @return boolean TRUE if it is, FALSE otherwise.
		 */
		public function isValid($token, $email) {
		
			return (boolean) $this->database->query(array(
				'name' => 'countTokens',
				'type' => 'mysql',
				'operation' => 'count',
				'table' => 'user.registration.tokens',
				'where' => array(
					'token' => $token,
					'email' => $email
				)
			))->fetch()['countTokens']['count'];
		
		}
		
		/**
		 * Get Company ID of token creator.
		 * @param string $token
		 * @return mixed Company ID of who originally created token, NULL otherwise.
		 */
		public function getCompanyID($token) {
			
			$return = null;
			
			$data = $this->database->query(array(
				'name' => 'getTokenCompanyID',
				'type' => 'mysql',
				'operation' => 'select',
				'table' => 'user.registration.tokens',
				'columns' => array(
					'company_id'
				),
				'where' => array(
					'token' => $token
				)
			))->fetch()['getTokenCompanyID'];
			
			if ($data) { $return = $data['company_id']; }
			
			return $return;

		}
		
		/**
		 * Get Token information.
		 * @param null|integer $tokenId [Optional]<br>If INTEGER, token ID and ignored $companyUserId. If NULL, gets all.
		 * @param integer $companyId [Optional]<br>Ignored if $tokenId given. Company ID. If given, returns tokens generated by this Company. If omitted, gets all on System.
		 * @return array Tokens array, or associative array if $tokenId is INTEGER.
		 */
		public function get($tokenId = null, $companyId = null) {
			
			$data = array(
				'name' => 'getTokens',
				'type' => 'mysql',
				'operation' => 'select',
				'table' => 'user.registration.tokens'
			);
			
			if ($tokenId !== null) {
				
				$data['where'] = array(
					'id' => $tokenId
				);
				
			} elseif ($companyId !== null) {
				
				$data['where'] = array(
					'company_id' => $companyId
				);
				
			}
			
			$return = $this->database->query($data)->fetch()['getTokens'];
			
			if ($return) {
			
				if (is_assoc_array($return)) { $return = array($return); }
				
			} else { $return = array(); }
			
			return $return;

		}
		
	}